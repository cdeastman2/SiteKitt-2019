<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEATFj/AAAAAABoIgAAFgAAACgAAABMAAAAsAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACIiIgAgICAAJmZmQBmZswAzJnMAAAzZgAAZpkAqqqqAJmZzABmmf8AZpnMAMDAwACZmf8AzMzMAGZm
        mQAAM5kAMzNmAJlmmQDMmZkAZpmZAP/MzADd3d0A///MAO7u7gD///8A/8z/AJlmZgCZZswAM2ZmAJnM
        /wCZzMwAAAAAAGZmZgCZmWYAM2aZAMyZZgD/mZkAAJmZAP/MmQDMzP8AADMzAABEAAAAAEQAZjMzAGYz
        ZgBmzP8AM5nMADMzmQAAmcwAAJn/ADNmzABmM8wAgACAAP+ZzAAzzP8AAGbMADOZmQBmZjMAzMyZAMxm
        mQAAM8wAAGZmAMyZ/wAzZjMAAICAAAAAiAAAAJkAREREAP/MZgBmmWYAAMz/AADMzAAAALsAzGZmADPM
        zAAAAGYAzJkzAGbMzAAAAIAAzGYzAP+ZZgCZZjMAMwBmADMAMwDMZswARAAAAAAAqgBmM5kAM5n/AABm
        MwAAZv8AZmb/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAECAwIBBAEFAQEDBgEDBwgICQgKCwwLDA0JDQgNCwwIAg4PEBAFEQMNEgANBAIHCAIHEgcT
        FBUUAwsEBxIEEg0WFxgYFxcZFhkWFxoRDgIbERISExIODgEcCAgICwsdDR0NHQsKCwgdCAweCgMODhAF
        HyAUESESFCIRIyECFAACJBcUJQcCCAQUEwgmFxgXFxcXFxcWGRQCIgcRBw4EIB8RAQ4DIgMKCAgMCwgn
        CCcIDQwICwwNCAwCDhAFKCkDCCYCDhQAAhMIABIHEhwXFQ0TBxQbEg0jFBcXGBgYFxcWGRYXGiEOAgcP
        EyofKywiDgECCAcDCAgKCAgLHQgNLQgNCA0uAxwvBR8iCBIECB4NGQ4NAggLEgcHFBQVEyEECA0SCBoH
        BBQXFxgYGBgYFxoBGhoAMDEFHygBAQMyDgMyEwgIAggeCAgICAQICCcICwMgBSgqEgQzFRICEhUHGgoH
        JRQLCAcXGRIBDQgEAg0AGgECGjQAGgEaADURAA4OLjA2Bh8fKCIACAoKCjc4NwoiCAgIHggICwcIBC4c
        DgUfKQQLAxQ5IwEWDQYSCAcNEgISFBcIAhINAxQCAAEhERECGhEHAgUhBywHJTctLi0GKgUgIgoIHQsn
        DA0IHQQICgQICAMKAg4iAw4oHwY6BAIEDQICGQ0UEQIaBxIjIQsXFAEHBAIEEhEhIg4HIQITEg4jOxEB
        AQoTPAoKCj03Ig4ICw0nDRUnJxUdDR0KCwgeCAgKCy4PHwESGhQ3BBIIAhQVDQcEAQcUAi46FBUKCA0R
        BDoKBxQNAgQOAg4hDgEBARMEPgcDEzIKBwMcCgQICA0MDQs+DQ0+HgwHCAweDQwEEB8/BwILBAILB0AU
        DRYSDQQOEi4LAhQZDREABDILCwIUFSQHBwcHDgISGgAPBAQyCgoKNw44QSAICAoIDQkLCggICAgLDAsI
        CwwNBh85EhICEgQbFD8SAhkUAgECBzsmDjsUFQsBBxoCNQISFBUNIwMHAgsBBxoOMCUyBgoICAowCC4y
        BgYHCAMCCAoICAoHCQIIBz4NAigfDhICCxICGg0kOAsUFSYCEggADRohAhcUAhMKEgMUAggUFBILEwQa
        CBIRGi42QEI3CAsLJwgnMAouNwYKDzcTBgoRCgIIAwIRDg8fQwIDEhISBwIHOxIHFBUERBMCABQACAcU
        FQgNChoRDRIHFw0SEgcAAA0CIQUwLTFABgYKCB4nCycLPh4nCx0NCCcICgoAAxMOLwYFHwYIExsOIRIS
        BwcCAhInFhISOwAHBwdAFBUUGgACAAQLBw0UDRIABwcCEjscCjAtMQYGBTcICAIICAgICAwNDA0IDScL
        DAcICBMIKgYCMgIKAAMaBxI6BxIHFBQHBAARByYAAiQZCyICBwACFAEUDRQCBA4EFEUHAT02MEZGMDAG
        BgYKAwIINwcIAwIICAgHAwIDAg4KDgAOAwIyAAMBCiMACBIEAiMLJhICAgIEEhMRFQ0CAgIAEwQHOhkN
        JAAHAgISEgUaCh1HRkY2MDcGQg8iEQdIEQIyIgUPIiIgIAYiSQ4OCg4OAjcAAwADIwcIBwIHEhIjCAIH
        DRELExQVAg4SABIHJgYUFgA1QAcREgsCAA4lRkZKMUZHRkYwLiAQDiAvHBwGABEhERMLFAIiAw4ODgMB
        MgAOAgMCAggNEgIHBEkiAgELEgE6FAsjDgICBwQjDQs1IwgOBxESAA4aGgctNkdGRjFHLQYpAg4AABsC
        ByMCEgcUBD0iIg4OIg4ODhEDDg4OIiAHBAQHEgcCEgUCFCAaNRUNQBICEgASBxIUOjsHAgICBBEBEUsB
        QC4tLTFKNgkBERETAAICABoHBxImEg8PDw4iDg8BDg4ODiIiAQYBBgAHBwgHAgAUEAINADgUFAsaAgcR
        QBQgDQhMBAIAEiQAAgICDgIBAAoeMU0CEhIBAAAAGgASI0kRIg8iDg4ODi8BDxAOAQ8ADg4ODiI9ERIH
        CwciJgdOJi4hDRkHAA4CBRQOAiMUCxECBxECCw4CAAASEQESDgACDRQhAgEbAgcSABIPIg8ODhAQQx8q
        KkNDEC8BIg4OAQ4ODhwiBw0CEhIOFBwkIiYIFBMLDgsCEgIRAhQCDgICEhIBORoaTwcREgEgJA0SEgAB
        ABI6D1BABQ4OEEMfHx9DHx8fQx8fKgEOEQMOEQ4OIgUSFAscIwcSORICFh4IEgISCwcRCEUEJg4AAgBJ
        AREgAQERBxEaK1ENBBIBABIHBCERIC8QHx8fH0MqHypDKh8qH0MqHwUOAA4iDgEOBg4SBAE7BxoHExQU
        FAAHABECBwcSDg0jAgIaAiMcACwBTAIRAAIrFA0RARERBCMAIC9DHx8qH0MfQx9DKENDKkNDQxBDHyoQ
        AS8gDiAFDyYHAgcCKxISFAASBwcCBwAIEQIUABIAGiAHEiABERoRAjsaHAcHJgEHBxwSGhAfHx8qBUNL
        BRAPKQ4OQygQEEMQEBAFQx8QLBAgDiAQAhISBAIqEg0SIQgHBzUhBBMSDhRMBBpRSQAaAD0AGgACAhIh
        EgQBSQ4UAAUoKh9DECAPAQEiAjITDg4BHAUQDhwPIAUgBSpDECwgBQESOgcLFAECAhIhEgcOERIbDSEH
        BAAjIgE6ESASGgFPGhEgEg8mAg4CBEkqHx9DKCIOBg4DCgMKAgMKAw4gDiAiHA4cLxAQQypDEBA9Dg0E
        TxoHAhIABxsHIyEIAgQSBxESGhIcJAAAATQBAQcaAgIAOyMHEQ1SHypDBQ4ODgIKAwgCMggDAggKDyAO
        Dg4ODhwcEBAQQx8QLComDQoaBwICIxILDhIgEi4EEhEhABIsURoNGiABAA5JAhEAIwIaEQ4SKB9DBSAO
        Dg4OGwIAAwIDAgMCDgEPAQ4ODg4GIiIiBRBDKigoBRQSASMCIQIENyYCAQ41BwcHBxJJAAAHEgIgAQEB
        ITsCOwFRGgIOEh8fBQ4QQygqKCpLLAMRCDICMgMgPyoRCiIOACIiDhwQEENDSx8EEQcRAAcSBwcaEgsN
        ARISHCAsAiERIDoEGgEBATsCGgIAGgESETQfKg4vECofKh8fHykgDjIHAwoAGxBDIA4KDgMODg4OLxAQ
        KkMqHwcREyMRAggSEhECEhIaHx8fHxESLBomBA4BAA4HLxIREgEsGg4BH0MQAUsfHx8qIg4DIgUAAwID
        Cg4qIA4OAjciMgEiDiIPQxBDKigFEQIaABICEhMHOwEfHx8fH1MaGgcREQE6EhETGgI0IRosAQARKyoF
        ARAfKSIGCAMICAIbDiIiChsBHxAOCiIIBgIDIg4iIC8QBUMqKgECAQcbByMSGh8fH0MfKh8fHysgUSMC
        OxIOIyASIhESIQERASsQLC9DQzMRGwgEBAQIAw4RDhEOBUMfAAgKDgoODgoiDiIFBRAQQyofEiESExIo
        Kh8fHx8qHx8qHx8qHx8fQxoaIxoSEhIhEhoBGgEsEBAgQwMOGwhUGwMbGwMRSA4ODisfQyIyBzcIDgoO
        Dg4iIiAQECgoKlERAkkfHx8fKh8qHypVHx8fHx8qVSofHx9DK1EaEhoSARoRKEMQECwOAxsDQkg3BjwO
        PFYDVw4qQx8gAjIHNwMOCg4ODiIFLxBDKkMqGigfKh8fHx8fHx8fKh8fHx8qHx8fHx8fKh8fHx8/GgAC
        GkNLICwgSBE8TjceFBkWGQ0UESwqQyofIjIIChMKEw4KDg4iDgUQEEMqH0MfHx8fHyofHx9DHx8qHx8f
        HyofHx8qHx8qHyofHx9PACAfQywQEFczEBkWFRcXFxQNDgUQEENDBQ4CAwg3EwMKDgoGDgYgDxAQKkMf
        HyofKR8fHyofHyofHx8fHx8fH0MqHx8fHx9VKh8fIBosH0MQEBAvDwMWGRQEDREqKhAOEBAQBSITAwoy
        BwoKEwoOCg4ODxAQEEMqHyofHx8qHyofHyofHx8fHyorH0MfHysqQx8fHx8fKh9RBSoqQxAQVxEUAQVC
        VxAsLCgFBSAiDgMICggICgMICgoKCg4iIiIFDxAQKh8fHyofHx8fHx8fHx8qHx8fKh8fHx8fHx8fHx9D
        Kh8rKkMqH0NDLEsaSw4DARAsECgpBg4DLgoKCAgKCggdCggICAoOCg4iDhAQBUMqHykfKh8qHx9DHx8q
        Hx8fHx8qHypDHx8fKkMfHx8fH0MQQyofKkMfKiwsEC9DKCgQAwAICgQIHgoKBB4KCA1YCAgKCg4OIiIi
        BS8oHwYDPQUoHx8fKh8qHx8fKh8fHx8fHyofKh8fHx9DHyoqEBBDKkMfQx8fQxAgHDkPNwIyDB4ICgwI
        CggMHicICwgKCAoOCg4iBQ4FBUsCDjIODx8fKh8fHx8fHx8fKh8rHx8fHx8fKh8fKh8fQwUPEB8fKipD
        HygQIg4DBw0+CwI+CAsKCAsMDQ0IHQweCAoILgAyDiIFDgVDSw4GNxNOHx8fKh8pKh8fHx8fKh8fHx8f
        Kh9THx8fHwUgDhxZKkMoKCpLPQQDAggEDjcDBgcICAwIDQ0+Jw0NCAgKCggDCg4ODi8QBSgFMAcbHCkf
        Kh8fHx8fHyofKh9VKh9DHx8fHyofH0MqEA4DDgEGDg8OIg4gAw8OCC4NCQMiAggLDA0nDQ0MCB4uCAgK
        CgI3HA8gDxAoLwQKPTIOKB8fKh8fKh8fVR8fKh8fHyofHyofHyofKCIiIgADIgMOIiIKCQoICQgNBAgK
        IjcLCQ0nDQ0MDQ0JCwgKAggDEzcBDxAQKigiAw8TAwUfKh8qHx8fKh8fHx8fKlUfKh8fHx8fKhAiEwgy
        DhMPDg4OCAsdDRUKPgoKDjcHDBQLDBUJDQgICAguCAoKCiICSBwPEBAQDwY3CC4GHx8fHx8fHx8fH0Mf
        Kh8qHx8fH0MqHx8cDg4DCggyDg4GCggJFBUIJwgKAzcHDA0IHQ0ICwgIBwg3BwMKAjIIDiIOEBAoKFYN
        DQkLCgUfHx8qHx8fKh9THx8fHx9DHx8fHyofEA4IEwgKCDciDg4IDT4NCAgILgoKPh4EHQQICAoCCgMO
        Cg4KDgguAwocIg8QBSogNxUNCQIKHx8fHx8qHx8qHx9DHx8qHx8fKh8fQwUiIggKCDICDig3CAMKCgwK
        CggKCAoLDA0IBzcAAw4OCg43ATcKAgoOCg4iBRAoKA8ECAcDEwgfHx8fHx8fHx8qH1UqHx8fKh8qHx8Q
        IgIDBwoIAyIiIAMCCggDBDAKCggICAgICg4AMhMKIg4DATIACgMHCg4ODhwFKh8QDgMKIgMIBh8fKh8q
        Hx9DHx8fHx8qHx8fHyofKgEDEzIHAwoIDg8cAwMKHgoLMQsICggIAg4ONwcEIkgPBQ8cAw4KCAoDIg4v
        QyofKCIPEwMGCAoqHx8fHypVHx8qHx8fHyofHx8fQ0MvDggKNwI3EyIiEA8CCD4eCA0JCAoGAwAGChQ9
        BRQNSyoFIg4OCA4IIgoiBS8qQx8oCAYODwgIBR8fHx8fHx8qHx8qHx8fQx8qHx8qHA4OIgcyAgMKDg8c
        MgoKCwkECAoiCggPNxQCHyAfOSooIg4gIg4KIggODg4FQyofHygEMhwOAwEfHx8qHx8qHx9DHx8qHx8f
        HyofQwUOIgMODg4OGw4iLw4IAgwNCgoILggOAhUZKCASHyoGDg4oQy8OCAoiAw4PIAUqQx8fKgIDAw4F
        Kh8fHx8qHx8fUx8fHx9DHyofHypDIg4iDiAvBRAPHAUcDloNCB0eCDcgDg8cEjkfHw8IDg4QDg8cCg4D
        Ew4iDhBLQyofHx8qDg4vQx8fHx8fHx8fKh8qHypVHx8fKh9DEAUOIhAFHA8cDgMgBS8CCA0ICAoCNwYB
        DwUOIg4CLwEOEBwiMgAKDgMOIiIFECoqQx8fHysfHx8fHx8qHx9DUx8fHx8fHx8qHx8fHwUgDyAFBUtL
        MgATMgU9CggICAgIAxMCAw4OBQEQKyArQykOMhMDIgMOIiIvDxBDKh9DKh9THx9THx8fHx8qHx8qHx9D
        Hx8qHypDHx9DLyAFKEsGFCgqJA0PDw4ICgoKCAgyIiIcKENDBR8QIhAyDgIyIgoiIgMiDyAFS0MqHx8f
        HyofHx8qHx8qH1MfHx8qHx8qHx8fHx8fEBAvKCpODSAfICoAWQYyCggICAgKCggOBi8cDkAKCgIKEwoD
        BggOIjIiDyAvBRAqHyofQx8fKh8fHx8fHx8fKh8fHyofHx8fHyofKh8gLwUfATVZKTspSzITCgoICAgI
        Cx4KCAcKCAoECAgKAwgCNwoiAw4iIiIPBS9DQyofH1UqHx8fKh8fHx8qHx8fQx8fHx9DKh8fHx8qEAVD
        HykaQyoqHCIGCAoICAdYHgg+CwsMDQgNCAsDCAoAMggOCiIDIg4PDg8QECofQx8qHx8qVR8fHyofHyof
        Hx9THx9THx8qHx8fQ0MQS0MfBRAQEAUBCAoICwwICwoNCj4LCA0JCwgKAjIINzITAw4KBiIPDg8gBUtD
        HyofHx9DHyofHx8fH1UfKh8fHx8qHx8fHx9DHx8qQ0MFDg4QKigoMgMeBAgKCwoECRUIJwgICwgKCgoI
        Ii4CAw4KIg4DIg4PEEtDKiofQx8qHx8fHx8fHx8qHx8fKh8fHx8qHx8qVR8qQyofLBBDH0MqAQIKCAgd
        C1sNCg0IFQgVCQgICAc3AwoOAwI3DgMiIiIPIA8QQyoqKx8qHx8fKh8fHyofHx8fHx8fKh8fHyofHx8q
        H0MfQx9DHyooHA4yCAoIBDcVCAsIJwgnCA0ICAgDCAoCNwA3Cg4KDiIOIi8QECpDHx8qHx8rKh8fHx8f
        HyofKkMfHx8fQx8fKh8fHx8qKh8qKkMQDg4ICgoCCggNCgsMCwoNDQwICwoICgMOAwAyACIDDg4yIg4P
        KBAqKkMfHx8fKh9VKh8fHypVHx8fH1UfKh8fHx8fKh8qH0MqKBAFBQ4TAwgOCggICh4MCwkNBAgNCwwE
        CAgCAxMDDg4DDiIDIg4PIC8QH0MqHx9DKh8fKh8fHyofHyofHx8qHx8qHysfHx8fHysqQxAQDg4iDgoO
        CggDBwgICAgICB4MCA0ECgQKNw4ODgMiDiIDIg4PIg8gBUsqH0MfHx8rHx8fKh8fHyofHyofHx8fHyof
        Hx8qHyofKihLBSAPIiIOIggOCggKCAgIBAoECg0ECh4ICgIKIjIOIjIOIg4PIiIOLwVDH0MfKlUqH1Uq
        Hx8fHx8fHx8fKh8fHx8fHyofHx8fKh8rQxAPIA8OIgMTMggyBwoHCAoLAwsKBAsECAgOMgAGBiIOMg8O
        Ig8gDy8gS0MfKh8fHyofHyofHypVHx9DHx8fH0NTHx8fHx9DVSofHyoFIAUPIiIODgoOCAgIAwoHGwoI
        CAQIBAgHMgADIgMOIg4iDg8OLw8OEBAfUx8fH0MfHx8fHx8fHyofHyofHyofHyofHx8fHyofHypDSxAQ
        IAUOIg4OCg4KAggKCAgICAsKCAgCAwIyADIOMiIPDg8ODw4PEBAQQx8qQx8fVSpDHx8fHyofHx9VKh8f
        Hx8fH0MfKh8fH0MfKigQEAUvBQ4iMgAyAgMKCAMHCgcKCAQHCAcDAAMODiIOIi8OLxAQBRAsHyofHx9V
        HyofHx8fHyofHx8qHx9THyofHypVHx8qHx9THx9DSxAQEAUvDiIDADICCDICAwcDBAcIBAgDAgMCSA4O
        DyAQEBAQKkMqH0MfKh8fH1MfHx8qHx8fHypVHx8fHx8fHyofHx9THyofHx8qH0MQSwUQIiIODgMAAwMC
        CAobCAIDCwMHAgMRLwEQEBAsKipDKkMqHysqHx9DVSofH0MqHx8fHx8fKh8fKh8qVR8fHyofHx9VHyof
        HypDKhBDBRAPDiIOAyIOAw4HNwIIBxsLDg4gLBAQQypDKkMfKisqQx8qH1MfKh8fHyofVR8qHypVHx8q
        Hx8fHx8fH1MfKh8qHyofHx8fKipDKgUFIA8ODyIODjICAwIRABsCEQEsKyorH0MfQx8fQx8qHx9THx8f
        Hx8fQx9VHx8qHx8fHyofH1UqHx8fKh8fHx8fVSofHyofHx9DKipDSxAOECIOIg4ODhsBDhEBGhAQQypD
        HyofQyorHypDHx8qHypDHx8fKh8qHx8fHx8fHyofHx8qHx8fKh9THx8fKh8fHyofH0MqHypDKgUQEA8O
        EA4PDg4QDgEsECtDLEMrH0MfKyofHx8fKh9DHx8fVR8qHx8fHx9DKh8fHx8fUx8fHx8qHx8fHx8qVR8q
        Hx8fH1UqHx9DKipDSxAQEA4QAU4gECwQQ0MqKx9DHyofH1MfHypDHx8fKlVDHyofHyorHx8qVR8fKh8f
        Kh8fHyofHx9VHypTHx8fHx8fHx8qHx8qKh9DKkMqEEMsEBArKkMqQysqQypDHx8fQyofH0NVKh8fQx8q
        Hx8fH1MfH1MfHx8qHx8fHx8fKh8fKh8fKh8fHyofKh8qHyofHypVHx9DKkMqQx8qHytDKiorHyofH0Mf
        KisfKlUfHyofHx9TH1UfHyofKh8fKh8fKh8fVSofHx8fKh8fHx8qHx8fHyofHx8fHx8fHyofHx8qVR8q
        VR8qH0NTH0MfKkNVH0MqKx8fKh8fH0NVH1MfH1MfH1MfH1UqHx9THx9VKh8fHx8qHx8fKh8fHx8qHx8f
        HyofKh8fHyofHyofHyofHyofVR9VKh9VQx8fKh9TVR9VKh8fKlUfKh8fKh8fKh8fKh8fHx8qHx8fKh8f
        Kh8fHx8fKh8fHx8qHx8fHyofHx8fKh8fHyofHyofHyofHyofKh8qHypVKh9THyofKh8fKh8qHx8qHx8q
        Hx8qHx8qHx8qHx8qHx8fKh8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
        Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAA==
</value>
  </data>
</root>